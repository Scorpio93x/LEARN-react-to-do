{"version":3,"sources":["components/Counter/index.tsx","components/ToDoApp/NoTodos.tsx","context/TodosContext.tsx","components/ToDoApp/todoForm.tsx","components/ToDoApp/checkAll.tsx","components/ToDoApp/otherButtons.tsx","components/ToDoApp/todoList.tsx","hooks/useLocalStorage.tsx","components/ToDoApp/index.tsx","pages/todo/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Counter","initialCount","useState","count","setCount","className","onClick","prevCount","NoTodos","TodosContext","createContext","TodoForm","todoInput","setTodoInput","useContext","todos","setTodos","idTodo","setIdTodo","action","onSubmit","event","preventDefault","trim","length","id","taskName","isComplete","isEditing","previousTodoId","type","placeholder","value","onChange","target","CheckAll","remaining","completeAllTodos","OtherButtons","clearCompleted","todosFiltered","filter","setFilter","clsx","TodoList","completeToDo","markAsEditing","updateToDo","deleteToDo","cancelEdit","map","todo","checked","defaultValue","onBlur","onKeyDown","key","autoFocus","onDoubleClick","filterr","UseLocalStorage","initValue","item","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","ToDoApp","useLocalStorage","name","setName","nameInput","useRef","useMemo","console","log","current","focus","storedName","Provider","ref","updatedTodos","ToDoPage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b93b190b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\ninterface Props {\n  initialCount: number;\n}\n\nfunction Counter({ initialCount }: Props): JSX.Element {\n  const [count, setCount] = useState(initialCount);\n  const increment = () => setCount((prevCount) => prevCount + 1);\n  const decrement = () => setCount((prevCount) => prevCount - 1);\n  const reset = () => setCount(initialCount);\n  return (\n    <div className=\"flex flex-col bg-blue-200 w-6/12 md:w-2/12 p-4 box-content text-center items-center h-auto\">\n      <span className={\"counter\"}>{count}</span>\n      <div className=\"p-2 flex flex-row place-content-around box-content h-8\">\n        <button\n          className=\"m-1 w-8 h-6 text-xl p-2 box-content font-bold bg-blue-100 hover:bg-blue-300 rounded-2xl\"\n          onClick={decrement}\n        >\n          -\n        </button>\n        <button\n          className=\"m-1 w-8 h-6 text-xl p-2 box-content font-bold bg-blue-100 hover:bg-blue-300 rounded-2xl\"\n          onClick={increment}\n        >\n          +\n        </button>\n      </div>\n      <button\n        className=\"mt-2 w-6/12 h-auto text-xl p-2 box-content font-bold bg-blue-100 hover:bg-blue-300 rounded-2xl\"\n        onClick={reset}\n      >\n        Reset\n      </button>\n    </div>\n  );\n}\n\nexport default Counter;\n","import React from \"react\";\nimport { ClipboardIcon } from \"@heroicons/react/solid\";\n\nfunction NoTodos() {\n  return (\n    <div className={\"text-center w-full h-auto\"}>\n      <ClipboardIcon className=\"h-12 w-12 mx-2 text-white-500 mx-auto my-0\" />\n      <p>Add todo's above!</p>\n    </div>\n  );\n}\n\nexport default NoTodos;\n","import { createContext } from \"react\";\n\n// @ts-ignore\nexport const TodosContext = createContext();\n","import React, { useContext, useState } from \"react\";\nimport { TodosContext } from \"../../context/TodosContext\";\n\ninterface Props {\n  todos: TodosProp[];\n  setTodos: any;\n  idTodo: string;\n  setIdTodo: any;\n}\n\ninterface TodosProp {\n  id: number;\n  taskName: string;\n  isComplete: boolean;\n  isEditing: boolean;\n}\n\nfunction TodoForm(): JSX.Element {\n  const [todoInput, setTodoInput] = useState(\"\");\n\n  const handleInput = (event: any) => setTodoInput(event.target.value);\n  const addTodo = (event: any) => {\n    event.preventDefault();\n\n    if (todoInput.trim().length === 0) {\n      return;\n    }\n    setTodos([\n      ...todos,\n      {\n        id: idTodo,\n        taskName: todoInput,\n        isComplete: false,\n        isEditing: false,\n      },\n    ]);\n\n    setIdTodo((previousTodoId: number) => previousTodoId + 1);\n\n    setTodoInput(\"\");\n  };\n  // @ts-ignore\n  const { todos, setTodos, idTodo, setIdTodo }: Props =\n    useContext(TodosContext);\n  return (\n    <div className=\"w-full shadow-2xl mb-2\">\n      <form action=\"#\" onSubmit={addTodo}>\n        <input\n          type=\"text\"\n          className=\"w-full h-8 p-6 mb-2\"\n          placeholder=\"What do you need to do?\"\n          value={todoInput}\n          onChange={handleInput}\n        />\n      </form>\n    </div>\n  );\n}\n\nexport default TodoForm;\n","import React from \"react\";\n\nfunction CheckAll({ remaining, completeAllTodos }: any): JSX.Element {\n  return (\n    <div\n      className={\n        \"w-full flex flex-row my-4 p-2 border-t-2 border-gray-500 place-content-around\"\n      }\n      onClick={completeAllTodos}\n    >\n      <button\n        className={\n          \"px-4 py-2 border-2 border-white rounded bg-white hover:bg-gray-100\"\n        }\n      >\n        Check All\n      </button>\n      <p className={\"p-2\"}>{remaining} items remaining</p>\n    </div>\n  );\n}\n\nexport default CheckAll;\n","import React from \"react\";\nimport clsx from \"clsx\";\n\n//TODO: Fix bug regarding conditional rendering and css style.\n//      tailwind css doesn't seem to load based on filter condition\nfunction OtherButtons({\n  clearCompleted,\n  todosFiltered,\n  filter,\n  setFilter,\n}: any) {\n  return (\n    <div\n      className={\n        \"w-full flex flex-row my-4 p-2 border-t-2 border-gray-500 place-content-around\"\n      }\n    >\n      <div>\n        <button\n          className={clsx(\n            \"m-2 px-4 py-2 box-content hover:bg-gray-200 rounded-xl\",\n            {\n              \"border-gray-500 border-2\": filter === \"all\",\n            }\n          )}\n          onClick={() => {\n            setFilter(\"all\");\n            todosFiltered(\"all\");\n          }}\n        >\n          All\n        </button>\n        <button\n          className={clsx(\n            \"m-2 px-4 py-2 box-content hover:bg-gray-200 rounded-xl\",\n            {\n              \"border-2 border-gray-500\": filter === \"active\",\n            }\n          )}\n          onClick={() => {\n            setFilter(\"active\");\n            todosFiltered(\"active\");\n          }}\n        >\n          Active\n        </button>\n        <button\n          className={clsx(\n            \"m-2 px-4 py-2 box-content hover:bg-gray-200 rounded-xl\",\n            {\n              \"border-gray-500 border-2\": filter === \"completed\",\n            }\n          )}\n          onClick={() => {\n            setFilter(\"completed\");\n            todosFiltered(\"completed\");\n          }}\n        >\n          Complete\n        </button>\n      </div>\n      <div>\n        <button\n          className={\n            \"px-4 py-2 box-content border-gray-500 hover:bg-gray-200 border-2 rounded-xl\"\n          }\n          onClick={clearCompleted}\n        >\n          Clear Completed\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default OtherButtons;\n","import React, { useContext, useState } from \"react\";\nimport { XIcon } from \"@heroicons/react/solid\";\nimport clsx from \"clsx\";\nimport CheckAll from \"./checkAll\";\nimport OtherButtons from \"./otherButtons\";\n\nexport interface Props {\n  todos: any[];\n  completeToDo: any;\n  markAsEditing: any;\n  updateToDo: any;\n  deleteToDo: any;\n  cancelEdit: any;\n  remaining: any;\n  clearCompleted: any;\n  completeAllTodos: any;\n  todosFiltered: any;\n}\n\nfunction TodoList({\n  completeToDo,\n  markAsEditing,\n  updateToDo,\n  deleteToDo,\n  cancelEdit,\n  remaining,\n  clearCompleted,\n  completeAllTodos,\n  todosFiltered,\n}: Props): JSX.Element {\n  const [filter, setFilter] = useState(\"all\");\n\n  return (\n    <>\n      <ul className={\"todo-list\"}>\n        {todosFiltered(filter).map((todo: any) => (\n          <li className={\"todo-item-container list-none w-full\"} key={todo.id}>\n            <div className=\"flex flex-row p-2 box-content bg-white hover:bg-gray-100\">\n              <input\n                className={\n                  \"w-1/12 p-4 box-content place-self-center toDoItem-checkbox\"\n                }\n                type=\"checkbox\"\n                onChange={() => completeToDo(todo.id)}\n                checked={todo.isComplete}\n              />\n              {!todo.isEditing ? (\n                <p\n                  className={clsx(\"w-11/12 p-4 box-content text-left\", {\n                    \"line-through\": todo.isComplete,\n                  })}\n                  onDoubleClick={() => markAsEditing(todo.id)}\n                >\n                  {todo.taskName}\n                </p>\n              ) : (\n                <input\n                  type={\"text\"}\n                  defaultValue={todo.taskName}\n                  onBlur={(event) => updateToDo(event, todo.id)}\n                  onKeyDown={(event) => {\n                    if (event.key === \"Enter\") {\n                      updateToDo(event, todo.id);\n                    } else if (event.key === \"Escape\") {\n                      cancelEdit(todo.id);\n                    }\n                  }}\n                  autoFocus\n                  className={clsx(\"w-11/12 p-4 box-content text-left\", {\n                    \"line-through\": todo.isComplete,\n                  })}\n                />\n              )}\n\n              <button\n                className={\"w-1/12 mr-2 ml-auto toDoItem-remove\"}\n                onClick={() => deleteToDo(todo.id)}\n              >\n                <XIcon className=\"h-5 w-5 mx-2 text-blue-500\" />\n              </button>\n            </div>\n          </li>\n        ))}\n      </ul>\n      <CheckAll remaining={remaining} completeAllTodos={completeAllTodos} />\n      <OtherButtons\n        clearCompleted={clearCompleted}\n        todosFiltered={todosFiltered}\n        filterr={filter}\n        setFilter={setFilter}\n      />\n    </>\n  );\n}\n\nexport default TodoList;\n","import React, { useEffect, useState } from \"react\";\n\nfunction UseLocalStorage(key: string, initValue: any) {\n  const [value, setValue] = useState(() => {\n    const item = localStorage.getItem(key);\n    return item ? JSON.parse(item) : initValue;\n  });\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n\n  return [value, setValue];\n}\n\nexport default UseLocalStorage;\n","import React, { MutableRefObject, useEffect, useMemo, useRef } from \"react\";\nimport NoTodos from \"../ToDoApp/NoTodos\";\nimport TodoForm from \"../ToDoApp/todoForm\";\nimport TodoList from \"../ToDoApp/todoList\";\nimport useLocalStorage from \"../../hooks/useLocalStorage\";\nimport { TodosContext } from \"../../context/TodosContext\";\n\nfunction ToDoApp() {\n  // const [name, setName] = useState(\"\");\n  const [name, setName] = useLocalStorage(\"name\", \"\");\n\n  const nameInput = useRef() as MutableRefObject<HTMLInputElement>;\n\n  const [todos, setTodos] = useLocalStorage(\"todos\", []);\n  const [idTodo, setIdTodo] = useLocalStorage(\"idForTodo\", 1);\n  // const [idTodo, setIdTodo] = useState(6);\n  // const [todos, setTodos] = useState([\n  //   {\n  //     id: 1,\n  //     taskName: \"I have to do something!\",\n  //     isComplete: true,\n  //     isEditing: false,\n  //   },\n  //   {\n  //     id: 2,\n  //     taskName: \"I have to do something! 2\",\n  //     isComplete: false,\n  //     isEditing: false,\n  //   },\n  //   {\n  //     id: 3,\n  //     taskName: \"I have to do something! 3\",\n  //     isComplete: false,\n  //     isEditing: false,\n  //   },\n  //   {\n  //     id: 4,\n  //     taskName: \"I have to do something! 4\",\n  //     isComplete: false,\n  //     isEditing: false,\n  //   },\n  //   {\n  //     id: 5,\n  //     taskName: \"I have to do something 5!\",\n  //     isComplete: false,\n  //     isEditing: false,\n  //   },\n  // ]);\n\n  const completeToDo = (id: number) => {\n    const updatedTodos = todos.map((todo: any) => {\n      if (todo.id === id) {\n        todo.isComplete = !todo.isComplete;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  };\n\n  const deleteToDo = (id: number) =>\n    setTodos([...todos].filter((todo: any) => todo.id !== id));\n\n  const markAsEditing = (id: number) => {\n    const updatedTodos = todos.map((todo: any) => {\n      if (todo.id === id) {\n        todo.isEditing = true;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  };\n\n  const updateToDo = (event: any, id: number) => {\n    const updatedTodos = todos.map((todo: any) => {\n      if (todo.id === id) {\n        if (event.target.value.trim().length === 0) {\n          todo.isEditing = false;\n          return todo;\n        }\n        todo.taskName = event.target.value;\n        todo.isEditing = false;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  };\n  const cancelEdit = (id: number) => {\n    const updatedTodos = todos.map((todo: any) => {\n      if (todo.id === id) {\n        todo.isEditing = false;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  };\n  const completeAllTodos = () => {\n    const updatedTodos = todos.map((todo: any) => {\n      todo.isComplete = true;\n      return todo;\n    });\n    setTodos(updatedTodos);\n  };\n\n  const todosFiltered = (filter: string) => {\n    if (filter === \"all\") {\n      return todos;\n    } else if (filter === \"active\") {\n      return todos.filter((todo: any) => !todo.isComplete);\n    } else if (filter === \"completed\") {\n      return todos.filter((todo: any) => todo.isComplete);\n    }\n  };\n\n  //`remainingCalculation` created for purpose of using useMemo.\n  // useMemo takes function that returns certain parameter and then changes it based on dependency coming from that\n  // function.\n\n  const remainingCalculation = () => {\n    // console.log(\"Calculating remaining todos the ultra slow way...\");\n    // for (let index: number = 0; index < 2000000000; index++) {}\n    return todos.filter((todo: any) => !todo.isComplete).length;\n  };\n  const remaining = useMemo(remainingCalculation, [todos]);\n  const clearCompleted = () =>\n    setTodos([...todos].filter((todo: any) => !todo.isComplete));\n\n  const handleNameInput = (event: any) => {\n    setName(event.target.value);\n    localStorage.setItem(\"name\", JSON.stringify(event.target.value));\n  };\n\n  useEffect(() => {\n    console.log(\"use effect running\");\n    nameInput.current.focus();\n    let storedName = localStorage.getItem(\"name\");\n    if (!!storedName) {\n      setName(JSON.parse(storedName));\n    } else {\n      setName(\"\");\n    }\n\n    return function cleanup() {\n      console.log(\"cleaning up...\");\n    };\n  }, []);\n  return (\n    <TodosContext.Provider value={{ todos, setTodos, idTodo, setIdTodo }}>\n      <div\n        className={\n          \"w-full md:w-8/12 p-4 box-content bg-blue-200 shadow-2xl mb-6\"\n        }\n      >\n        <div className={\"m-2\"}>\n          <h1>What is your name?</h1>\n          <form action=\"#\">\n            <input\n              className={\"p-4 \"}\n              type=\"text\"\n              placeholder=\"What is your name?\"\n              ref={nameInput}\n              value={name}\n              onChange={handleNameInput}\n            />\n          </form>\n          {name && <p className={\"p-2\"}>Hi {name}</p>}\n        </div>\n        <h1 className={\"text-left my-2 text-3xl\"}>ToDo App</h1>\n        <TodoForm />\n        {todos.length > 0 ? (\n          <TodoList\n            todos={todos}\n            completeToDo={completeToDo}\n            markAsEditing={markAsEditing}\n            updateToDo={updateToDo}\n            cancelEdit={cancelEdit}\n            deleteToDo={deleteToDo}\n            clearCompleted={clearCompleted}\n            remaining={remaining}\n            completeAllTodos={completeAllTodos}\n            todosFiltered={todosFiltered}\n          />\n        ) : (\n          <NoTodos />\n        )}\n      </div>\n    </TodosContext.Provider>\n  );\n}\n\nexport default ToDoApp;\n","import React from \"react\";\nimport Counter from \"../../components/Counter\";\nimport ToDoApp from \"../../components/ToDoApp\";\n\nfunction ToDoPage(): JSX.Element {\n  return (\n    <div className=\"w-full text-center p-5 box-border bg-gray-100 font-bold text-2xl flex flex-col items-center\">\n      <ToDoApp />\n      <Counter initialCount={0} />\n    </div>\n  );\n}\n\nexport default ToDoPage;\n","import React from 'react';\nimport './App.css';\nimport ToDoPage from \"./pages/todo\";\n\nfunction App():JSX.Element {\n  return (\n    <>\n      <ToDoPage />\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}